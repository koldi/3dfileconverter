#include "catch2.hpp"
#include "OBJParser.h"
#include "Material.h"
#include <vector>

std::string minimalOBJFileData = R"(
v 1.000000 -1.000000 -1.000000
v 1.000000 -1.000000 1.000000
v -1.000000 -1.000000 1.000000
v -1.000000 -1.000000 -1.000000
vt 1.0000 1.0000
vt -1.0000 1.0000
vn 0.0000 -1.0000 0.0000
vn 0.0000 1.0000 0.0000
vn 1.0000 0.0000 0.0000
vn -0.0000 -0.0000 1.0000
usemtl Material
f 1 2 3 4
f 1/1 2/2 3/1 4/2
f 1/1/1 2/2/2 3/1/3 4/2/4
f 1//1 2//2 3//3 4//4
)";

std::vector<Face> materialFaces = {{{ {1.000000, -1.000000, -1.000000}, {}, {} },
{ {1.000000, -1.000000, 1.000000}, {}, {} },
{ {-1.000000, -1.000000, 1.000000}, {}, {} },
{ {-1.000000, -1.000000, -1.000000}, {}, {} }},

{{ {1.000000, -1.000000, -1.000000}, {1.0000, 1.0000}, {} },
{ {1.000000, -1.000000, 1.000000}, {-1.0000, 1.0000}, {} },
{ {-1.000000, -1.000000, 1.000000}, {1.0000, 1.0000}, {} },
{ {-1.000000, -1.000000, -1.000000}, {-1.0000, 1.0000}, {} }},

{{ {1.000000, -1.000000, -1.000000}, {1.0000, 1.0000}, {0.0000, -1.0000, 0.0000} },
{ {1.000000, -1.000000, 1.000000}, {-1.0000, 1.0000}, {0.0000, 1.0000, 0.0000} },
{ {-1.000000, -1.000000, 1.000000}, {1.0000, 1.0000}, {1.0000, 0.0000, 0.0000} },
{ {-1.000000, -1.000000, -1.000000}, {-1.0000, 1.0000}, {-0.0000, -0.0000, 1.0000} }},

{{ {1.000000, -1.000000, -1.000000}, {}, {0.0000, -1.0000, 0.0000} },
{ {1.000000, -1.000000, 1.000000}, {}, {0.0000, 1.0000, 0.0000} },
{ {-1.000000, -1.000000, 1.000000}, {}, {1.0000, 0.0000, 0.0000} },
{ {-1.000000, -1.000000, -1.000000}, {}, {-0.0000, -0.0000, 1.0000} }}};

std::string minimalOBJFileDataWithNegativeIndex = R"(
v 1.000000 -1.000000 -1.000000
v 1.000000 -1.000000 1.000000
v -1.000000 -1.000000 1.000000
v -1.000000 -1.000000 -1.000000
vt 1.0000 1.0000
vt -1.0000 1.0000
vn 0.0000 -1.0000 0.0000
vn 0.0000 1.0000 0.0000
vn 1.0000 0.0000 0.0000
vn -0.0000 -0.0000 1.0000
usemtl Material
f -1/-1/-1 -2/-2/-2 -3/-1/-3 -4/-2/-4)";

std::vector<Face> negativeFaces = 
{{{ {-1.000000, -1.000000, -1.000000}, {-1.0000, 1.0000}, {-0.0000, -0.0000, 1.0000} },
{ {-1.000000, -1.000000, 1.000000}, {1.0000, 1.0000}, {1.0000, 0.0000, 0.0000} },
{ {1.000000, -1.000000, 1.000000}, {-1.0000, 1.0000}, {0.0000, 1.0000, 0.0000} },
{ {1.000000, -1.000000, -1.000000}, {1.0000, 1.0000}, {0.0000, -1.0000, 0.0000} }}};

std::string minimalWithMultipleObjects = R"(
v 1.000000 -1.000000 -1.000000
v 1.000000 -1.000000 1.000000
v -1.000000 -1.000000 1.000000
v -1.000000 -1.000000 -1.000000
vt 1.0000 1.0000
vt -1.0000 1.0000
vn 0.0000 -1.0000 0.0000
vn 0.0000 1.0000 0.0000
vn 1.0000 0.0000 0.0000
vn -0.0000 -0.0000 1.0000
usemtl Material1
f 1 2 3 4
f 1/1 2/2 3/1 4/2
f 1/1/1 2/2/2 3/1/3 4/2/4
f 1//1 2//2 3//3 4//4
v 1.000000 -1.000000 -1.000000
v 1.000000 -1.000000 1.000000
v -1.000000 -1.000000 1.000000
v -1.000000 -1.000000 -1.000000
vt 1.0000 1.0000
vt -1.0000 1.0000
vn 0.0000 -1.0000 0.0000
vn 0.0000 1.0000 0.0000
vn 1.0000 0.0000 0.0000
vn -0.0000 -0.0000 1.0000
usemtl Material2
f 5 6 7 8
f 5/3 6/4 7/3 8/4
f 5/3/5 6/4/6 7/3/7 8/4/8
f 5//5 6//6 7//7 8//8
v 1.000000 -1.000000 -1.000000
v 1.000000 -1.000000 1.000000
v -1.000000 -1.000000 1.000000
v -1.000000 -1.000000 -1.000000
vt 1.0000 1.0000
vt -1.0000 1.0000
vn 0.0000 -1.0000 0.0000
vn 0.0000 1.0000 0.0000
vn 1.0000 0.0000 0.0000
vn -0.0000 -0.0000 1.0000
usemtl Material3
f 9 10 11 12
f 9/5 10/6 11/5 12/6
f 9/5/9 10/6/10 11/5/11 12/6/12
f 9//9 10//10 11//11 12//12)";


TEST_CASE("OBJ Data Parser", "[parser]")
{
    OBJParser parser;
    SECTION( " minimal data object " ) 
    {
        auto input = materialFaces;
        auto material = parser.FromData(minimalOBJFileData);
        std::vector<Material> expected = {{"Material", std::move(input)}};
        REQUIRE(material == expected);
    }
    SECTION( " minimal data object with negative index" ) 
    {
        auto input = negativeFaces;
        auto material = parser.FromData(minimalOBJFileDataWithNegativeIndex);
        std::vector<Material> expected = {{"Material", std::move(input)}};
        REQUIRE(material == expected);
    }
    SECTION( " minimal data with multiple object" ) 
    {
        auto input1 = materialFaces;
        auto input2 = materialFaces;
        auto input3 = materialFaces;
        auto material = parser.FromData(minimalWithMultipleObjects);
        std::vector<Material> expected = {{"Material1", std::move(input1)}, {"Material2", std::move(input2)},{"Material3", std::move(input3)}};
        REQUIRE(material == expected);
    }

}

